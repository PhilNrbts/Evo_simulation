Evo_Game <- function(ncol = 4,nrow = 4, nFood = 5, nAgent = 2) {
  Field <- matrix(0,ncol,nrow)
  t <- 0
  t_String <- function(t=t) {
    string <- paste0("t",t)
    return(string)
    }
  tString <- t_String(t)
  gen_Field_Pos <- function (Field, n) {
    FieldPos <- sample(1:length(Field), size = n)
    Field[FieldPos] <- 1
    return(Field)
  }
  foodField <- gen_Field_Pos(Field, nFood)
  agentField <- gen_Field_Pos(Field,nAgent)

  gen_Img_Dat <- function(foodField,agentField,Field) {
    fCods <- which(foodField > 0)
    aCods <- which(agentField > 0)
    faCods <- intersect(fCods,aCods)
    imgField <- Field
    imgField[fCods] <- "Food"
    imgField[aCods] <- "Agent"
    imgField[faCods] <- "Agent on Food"
    imgDat <-melt(imgField)
    imgDat <-imgDat[imgDat$value!=0,]
    return(imgDat)
  }
  imgDat <- gen_Img_Dat(foodField,agentField,Field)
  gen_Img_Plot <- function(imgDat) {
    ggplot() +
      scale_x_continuous() + scale_y_continuous() + coord_fixed() + 
      scale_fill_identity() + scale_size_identity() +
      geom_rect(aes(xmin=-0.5, xmax=ncol+0.5, ymin=-0.5, ymax=nrow+0.5, fill = c("antiquewhite2")), color="black", alpha=1) +
      geom_raster(data = imgDat[imgDat["value"]=="Food",], mapping = aes(x=Var1,y=Var2,fill="green2")) +
      scale_shape_identity() +
      geom_point(data = imgDat[imgDat["value"]=="Agent",], mapping = aes(x=Var1,y=Var2,shape=c(rep(21,length(Var1)))),size=20,fill="red") +
      geom_point(data = imgDat[imgDat["value"]=="Agent on Food",], mapping = aes(x=Var1,y=Var2,shape=c(rep(21,length(Var1)))),size=20,fill="yellow") +
      labs(x=paste("X (0 -",ncol,")"), y=paste("Y (0 -",nrow,")"), title=tString)
  }
  imgPlot <- gen_Img_Plot(imgDat)
  
  
  Global <- list()
  Global$Stats <- data.frame(time_point = t, Food_Total = nFood, Agent_Total = nAgent,
                             Ratio_F_by_A = c(nFood/nAgent), Ratio_F_by_Total = nFood/length(Field),
                             Born = 0, Died = 0)
  
  agentCoord <- data.frame(ID=paste0("A",1:nAgent),as.data.frame(which(agentField>0, arr.ind = TRUE)),
                           ind=which(agentField>0, arr.ind = FALSE))
  foodCoord <- as.data.frame(cbind(which(foodField>0, arr.ind = TRUE),ind=which(foodField>0, arr.ind = FALSE)))

  Global$Time_Series[[tString]] <- list(Image_Plot=imgPlot, Data_Plot=imgDat, Agent_Coordinates=agentCoord, Food_Coordinates=foodCoord)
  

}

# Experimental ideas from here on:
#Local
total_count <- Agent_Amount # maybe total count at other place
Agent_ID <- paste0("A",1:total_count)
Local$Population <- data.frame(Agent_ID=Agent_ID,Birth_Cod=A_Cods,Birth_t=time_point,Death_Cod=NA,Death_t=NA,Live_Duration=0,Parent_ID=NA,Food_Consumed=0)
Ind_Str <- data.frame(Agent_ID=as.factor(Agent_ID),t=0,Cod=0,CodX=2,CodY=3,CodXDiff=0,CodYDiff=0,Sensing=6,Action=7,Energy=8,Fitness=9)
Ind_Str["Cod"] <- A_Cods
Ind_Str["CodX"] <- as.vector(which(A_Field > 0, arr.ind = TRUE)[,1])
Ind_Str["CodY"] <- as.vector(which(A_Field > 0, arr.ind = TRUE)[,2])

#Sensing
if(length(FA_Cods)>0){
  Ind_Sensing <- vapply(Ind_Str["Cod"], function(x) FA_Cods %in% x, logical(length(FA_Cods)))
  Ind_Str[Ind_Sensing,"Sensing"] <- 1
  Ind_Str$Sensing[Ind_Str$Sensing!=1] <- 0
  } else {
    Ind_Str$Sensing <- 0
  }

#Eating (here food-update)
if (sum(Act_Intent[,2])> 0){
  Ind_Str$Action[Ind_Str$Agent_ID[Act_Intent[,1]]] <- 1
  Food_Amount <- Food_Amount - length(Ind_Str$Action[Ind_Str$Agent_ID[Act_Intent[,1]]])
  F_Field[Ind_Str$Cod[Ind_Str$Agent_ID[Act_Intent[,1]]]] <- F_Field[Ind_Str$Cod[Ind_Str$Agent_ID[Act_Intent[,1]]]] - 1
  Local$Population$Food_Consumed[Act_Intent[,1]] <- Local$Population$Food_Consumed[Act_Intent[,1]] + 1
  Ind_Str$Action[Ind_Str$Action!=1] <- 0
  } else {
    Ind_Str$Action <- 0
  }

#Initialising eating for next TP
Act_Intent <- data.frame(Agent_ID=Ind_Str$Agent_ID,Sensing=Ind_Str$Sensing)[Ind_Str$Sensing==1,]

#Calculating Energy
Ind_Str$Energy[((Ind_Str$CodXDiff>0)|(Ind_Str$CodYDiff>0))] <- as.numeric(Ind_Str$Energy[((Ind_Str$CodXDiff>0)|(Ind_Str$CodYDiff>0))]) - 3
Ind_Str$Energy[((Ind_Str$CodXDiff==0)&(Ind_Str$CodYDiff==0))] <- as.numeric(Ind_Str$Energy[((Ind_Str$CodXDiff==0)&(Ind_Str$CodYDiff==0))]) - 1
Ind_Str$Energy[Ind_Str$Action>0] <- Ind_Str$Energy[Ind_Str$Action>0] + 15

#Categorising Fitness
Ind_Str$Fitness[Ind_Str$Energy < -15] = "Vanishing"
Ind_Str$Fitness[Ind_Str$Energy >= -15  & Ind_Str$Energy < 45] = "Normal"
Ind_Str$Fitness[Ind_Str$Energy >= 45] = "Reproducing"



#Managing Death
Local$Population$Death_Cod[Ind_Str$Agent_ID[Ind_Str$Fitness=="Vanishing"]] <- Ind_Str$Cod[Ind_Str$Fitness=="Vanishing"]
Local$Population$Death_t[Ind_Str$Agent_ID[Ind_Str$Fitness=="Vanishing"]] <- Ind_Str$t[Ind_Str$Fitness=="Vanishing"]
Local$Population$Live_Duration[Ind_Str$Agent_ID[Ind_Str$Fitness=="Vanishing"]] <- as.numeric(Local$Population$Death_t[Ind_Str$Agent_ID[Ind_Str$Fitness=="Vanishing"]]) - as.numeric(Local$Population$Birth_t[Ind_Str$Agent_ID[Ind_Str$Fitness=="Vanishing"]])
Agent_Amount <- Agent_Amount - sum(Ind_Str$Fitness=="Vanishing")
Agent_Field(c(Ind_Str$Cod[Ind_Str$Fitness=="Vanishing"])) <- 0 #Could be obsolete
Global$Stats$Died <- Global$Stats$Died + length(Ind_Str$Fitness=="Vanishing")

Ind_Str[[time_point]] <- Ind_Str
#New t, new life first
t <- t+1
time_point <- t_str(t)
Parent <- Ind_Str[c("Agent_ID","CodX","CodY","Cod")][Ind_Str$Fitness=="Reproducing",]
Child_ID <- paste0("A",total_count+1:nrow(Parent))
Child <- cbind(Child_ID,Parent[c(2,3)])
while(any(Parent[c(2,3)]==Child[c(2,3)])){
  Child[c(2,3)] <- Parent[c(2,3)] + sample(c(-1,0,1),nrow(Parent)*2,replace = T)
}
Child[c(2,3)] <- OverstepCheck(Child[c(2,3)])
Child <- Append_Cod(Child)
Eater <- Ind_Str[c("Agent_ID","CodX","CodY","Cod")][((Ind_Str$Fitness=="Normal") & (Ind_Str$Sensing == 1)),]
Walker <- Ind_Str[c("Agent_ID","CodX","CodY")][((Ind_Str$Fitness=="Normal") & (Ind_Str$Sensing == 0)),]
Walker[c("CodXDiff","CodYDiff")] <- matrix(sample(c(-1,0,1),length(nrow(Walker))*2),ncol = 2)
Walker[c("CodX","CodY")] <- Walker[c("CodX","CodY")] - Walker[c("CodXDiff","CodYDiff")]
Walker[c("CodX","CodY")] <- OverstepCheck(Walker[c("CodX","CodY")])
Walker <- Append_Cod(Walker)
